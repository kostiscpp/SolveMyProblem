services:

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # User service database
  user-service-db:
    image: mongo:latest
    container_name: user-service-db
    ports:
      - "27017:27017"
    volumes:
      - user-service-db-data:/data/db  # Persist the data
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Transaction service database
  transaction-service-db:
    image: mongo:latest
    container_name: transaction-service-db
    ports:
      - "27018:27017"
    volumes:
      - transaction-service-db-data:/data/db  # Persist the data
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Problem Management service database
  problem-management-service-db:
    image: mongo:latest
    container_name: problem-management-service-db
    ports:
      - "27019:27017"
    volumes:
      - problem-management-service-db-data:/data/db  # Persist the data
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend/fe
      dockerfile: Dockerfile  # Explicitly specify the Dockerfile path
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_GOOGLE_ID=45490869129-jrlunk0v84vv1crr3d44v1c10j5jheib.apps.googleusercontent.com
      - REACT_APP_GOOGLE_SECRET=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
      - NODE_OPTIONS=--openssl-legacy-provider
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # User Service
  user-service:
    build: ./user-service  # Build from the Dockerfile in ./user-service directory
    ports:
      - "4217:4217"
    depends_on:
      - user-service-db
      - rabbitmq
    environment:
      - SECRET_JWT=mysecretkeythan
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MONGO_URI=mongodb://user-service-db:27017/user-service-db
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Solver Service
  solver-service:
    build: 
      context: ./solver-service  # Build from the Dockerfile in ./solver-service directory
      dockerfile: Dockerfile  # Explicitly specify the Dockerfile path
    ports:
      - "6789:6789"
    depends_on:
      - rabbitmq
    environment:
      - JWT_SECRET_KEY=mysecretkeythan
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - solver-service-data:/data  # Persist the data
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Problem Management Service
  problem-management-service:
    build: 
      context: ./problem-management-service  # Build from the Dockerfile in ./problem-management-service directory
      dockerfile: Dockerfile  # Explicitly specify the Dockerfile path
    ports:
      - "5000:5000"
    depends_on:
      - problem-management-service-db
      - rabbitmq
    environment:
      - JWT_SECRET_KEY=mysecretkeythan
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MONGO_URI=mongodb://problem-management-service-db:27017/problem-management-service-db
    volumes:
      - problem-management-service-data:/data  # Persist the data
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped

  # Orchestrator Service
  orchestrator:
    build: 
      context: ./orchestrator  # Build from the Dockerfile in ./orchestrator directory
      dockerfile: Dockerfile  # Explicitly specify the Dockerfile path
    ports:
      - "6900:6900"
    depends_on:
      - rabbitmq
    environment:
      - JWT_SECRET_KEY=mysecretkeythan
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped
  
  # Transaction Service
  transaction-service:
    build:
      context: ./transaction-service  # Build from the Dockerfile in ./transaction-service directory
      dockerfile: Dockerfile  # Explicitly specify the Dockerfile path
    ports:
      - "4275:4275"
    depends_on:
      - transaction-service-db
      - rabbitmq
    environment:
      - JWT_SECRET_KEY=mysecretkeythan
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MONGO_URI=mongodb://transaction-service-db:27017/transaction-service-db
    networks:
      - app-network
    restart: always  # Ensures the frontend service is restarted on failure or when stopped



# Define volumes globally
volumes:
  user-service-db-data:  # Named volume for user-service-db
  transaction-service-db-data:  # Named volume for transaction-service-db
  problem-management-service-db-data:  # Named volume for problem-management-service-db
  problem-management-service-data:  # Named volume for problem-management-service
  solver-service-data:  # Named volume for solver-service

# Define networks globally
networks:
  app-network:
    driver: bridge
