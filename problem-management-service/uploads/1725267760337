{
    "userId": "66d4a4789f7beb4a279061e7",
    "numVehicles": 3,
    "depot": 0,
    "maxDistance": 50,
    "locationFileContent": {
        "Locations": [
          {
            "Latitude": 37.99983328183838,
            "Longitude": 23.74317714798427
          },
          {
            "Latitude": 37.966783510525985,
            "Longitude": 23.778605533642235
          },
          {
            "Latitude": 37.9990464764814,
            "Longitude": 23.773251398190194
          },
          {
            "Latitude": 37.974070236340665,
            "Longitude": 23.737519890565082
          },
          {
            "Latitude": 37.99763705556787,
            "Longitude": 23.76632669971703
          },
          {
            "Latitude": 37.987158185269436,
            "Longitude": 23.760040398809927
          },
          {
            "Latitude": 37.96565952612894,
            "Longitude": 23.78044816563277
          },
          {
            "Latitude": 38.00816194011881,
            "Longitude": 23.743726736188382
          },
          {
            "Latitude": 37.983474656462256,
            "Longitude": 23.73256864917707
          },
          {
            "Latitude": 37.96362413346355,
            "Longitude": 23.77785820154608
          },
          {
            "Latitude": 37.96581060070882,
            "Longitude": 23.72133687257313
          },
          {
            "Latitude": 37.97624293546459,
            "Longitude": 23.740238201740137
          },
          {
            "Latitude": 38.00566809733227,
            "Longitude": 23.728089082692076
          },
          {
            "Latitude": 38.00132387722171,
            "Longitude": 23.75830400972441
          },
          {
            "Latitude": 37.96320247915091,
            "Longitude": 23.785174964462342
          },
          {
            "Latitude": 37.965357705819066,
            "Longitude": 23.74320004992697
          },
          {
            "Latitude": 37.9692186084866,
            "Longitude": 23.785110852487332
          },
          {
            "Latitude": 37.98271697637991,
            "Longitude": 23.73542153051244
          },
          {
            "Latitude": 37.97230013076112,
            "Longitude": 23.788423933330492
          },
          {
            "Latitude": 37.97827880279073,
            "Longitude": 23.75884558944574
          }
        ]
      },
    "pythonFileContent": "import json\nimport os\nimport sys\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp\nfrom math import radians, sin, cos, sqrt, atan2\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    \"\"\"Calculate the great-circle distance between two points on the Earth's surface.\"\"\"\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = 6371 * c  # Earth radius in kilometers\n    return int(round(1000 * distance))\n\ndef calculate_distance_matrix(locations):\n    num_locations = len(locations)\n    distance_matrix = [[0]*num_locations for _ in range(num_locations)]\n    for i in range(num_locations):\n        for j in range(num_locations):\n            lat1, lon1 = locations[i]['Latitude'], locations[i]['Longitude']\n            lat2, lon2 = locations[j]['Latitude'], locations[j]['Longitude']\n            distance_matrix[i][j] = haversine_distance(lat1, lon1, lat2, lon2)\n    return distance_matrix\n\ndef create_data_model(locations, num_vehicles, depot):\n    data = {}\n    data[\"distance_matrix\"] = calculate_distance_matrix(locations)\n    data[\"num_vehicles\"] = num_vehicles\n    data[\"depot\"] = depot\n    return data\n\ndef print_solution(data, manager, routing, solution):\n    print(f\"Objective: {solution.ObjectiveValue()}\")\n    max_route_distance = 0\n    for vehicle_id in range(data[\"num_vehicles\"]):\n        index = routing.Start(vehicle_id)\n        plan_output = f\"Route for vehicle {vehicle_id}:\n\"\n        route_distance = 0\n        while not routing.IsEnd(index):\n            plan_output += f\" {manager.IndexToNode(index)} -> \"\n            previous_index = index\n            index = solution.Value(routing.NextVar(index))\n            route_distance += routing.GetArcCostForVehicle(\n                previous_index, index, vehicle_id\n            )\n        plan_output += f\"{manager.IndexToNode(index)}\n\"\n        plan_output += f\"Distance of the route: {route_distance}m\n\"\n        print(plan_output)\n        max_route_distance = max(route_distance, max_route_distance)\n    print(f\"Maximum of the route distances: {max_route_distance}m\")\n\ndef read_json_file(file_path):\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n        return data.get('Locations', [])\n\ndef main():\n    if len(sys.argv) != 5:\n        print(\"Wrong number of args.\nUsage: python <script_name.py> <input_file.json> <num_vehicles> <depot> <max_distance>\")\n        sys.exit(1)\n    input_file = os.path.abspath(sys.argv[1])  # Get absolute path\n    num_vehicles = int(sys.argv[2])\n    depot = int(sys.argv[3])\n    max_distance = int(sys.argv[4])\n    locations = read_json_file(input_file)\n    data = create_data_model(locations, num_vehicles, depot)\n    manager = pywrapcp.RoutingIndexManager(\n        len(data[\"distance_matrix\"]), data[\"num_vehicles\"], data[\"depot\"]\n    )\n    routing = pywrapcp.RoutingModel(manager)\n    def distance_callback(from_index, to_index):\n        from_node = manager.IndexToNode(from_index)\n        to_node = manager.IndexToNode(to_index)\n        return data[\"distance_matrix\"][from_node][to_node]\n    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n    dimension_name = \"Distance\"\n    routing.AddDimension(\n        transit_callback_index,\n        0,  # no slack\n        max_distance,  # vehicle maximum travel distance\n        True,  # start cumul to zero\n        dimension_name,\n    )\n    distance_dimension = routing.GetDimensionOrDie(dimension_name)\n    distance_dimension.SetGlobalSpanCostCoefficient(100)\n    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n    search_parameters.first_solution_strategy = (\n        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC\n    )\n    solution = routing.SolveWithParameters(search_parameters)\n    if solution:\n        print_solution(data, manager, routing, solution)\n    else:\n        print(\"No solution found !\")\n\nif __name__ == \"__main__\":\n    main()"
  }
  